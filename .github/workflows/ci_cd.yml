name: Django CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.4" # Specify the required Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DEBUG: ${{ secrets.DEBUG }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
        run: |
          python manage.py dbcheck

      - name: Build and collect static files
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DEBUG: ${{ secrets.DEBUG }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
        run: |
          python manage.py collectstatic --noinput

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DEBUG: ${{ secrets.DEBUG }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
        run: |
          python manage.py test

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/client_management_system:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/client_management_system:latest

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER: ${{ secrets.SERVER }}
          USERNAME: ${{ secrets.USERNAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DEBUG: ${{ secrets.DEBUG }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
        if: ${{ github.event_name != 'push' }} # Skip deployment on push
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          rsync -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" -avz --exclude='.git' --exclude='venv' ./ ${{ secrets.USERNAME }}@${{ secrets.SERVER }}:/var/www/client-management-system/
          ssh -i private_key.pem -o StrictHostKeyChecking=no -t $USERNAME@$SERVER << 'EOF'
            cd /var/www/client-management-system
            source /var/www/client-management-system/venv/bin/activate
            pip install -r requirements.txt
            export SECRET_KEY="${{ secrets.SECRET_KEY }}"
            export DATABASE_NAME="${{ secrets.DATABASE_NAME }}"
            export DATABASE_USER="${{ secrets.DATABASE_USER }}"
            export DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"
            export DATABASE_HOST="${{ secrets.DATABASE_HOST }}"
            export DATABASE_PORT="${{ secrets.DATABASE_PORT }}"
            export DEBUG="${{ secrets.DEBUG }}"
            export ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}"
            export CSRF_TRUSTED_ORIGINS="${{ secrets.CSRF_TRUSTED_ORIGINS }}"
            python manage.py migrate
            sudo chown www-data:www-data /var/www/client-management-system/
          EOF